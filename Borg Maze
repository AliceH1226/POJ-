//http://poj.org/problem?id=3026
//https://www.cnblogs.com/kuangbin/p/3147031.html








#include<iostream>
#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<queue>
#include<map>
const int INF=0x3f3f3f3f;
using namespace std;

int n,m;
char g[110][110];
int a[110][110];
int dir[][2]={{1,0},{-1,0},{0,1},{0,-1}};
int t[110][110];
int cost[110][110];
void bfs(int sx,int sy)
{
    queue<pair<int,int> >q;
    while(!q.empty())
    {
        q.pop();
    }
    memset(t,-1,sizeof(t));
    t[sx][sy]=0;
    q.push(make_pair(sx,sy));
    while(!q.empty())
    {
        pair<int,int>now=q.front();
        q.pop();
        if(a[now.first][now.second]!=-1)
            cost[a[sx][sy]][a[now.first][now.second]]=t[now.first][now.second];
        for(int i=0;i<4;i++)
        {
            int tx=now.first+dir[i][0];
            int ty=now.second+dir[i][1];
            if(g[tx][ty]=='#'||t[tx][ty]!=-1)continue;
            t[tx][ty]=t[now.first][now.second]+1;
            q.push(make_pair(tx,ty));
        }
    }
}

bool vis[110];
int lowc[110];


int Prim(int n)
{
    int ans=0;
    memset(vis,false,sizeof(vis));
    vis[0]=true;
    for(int i=1;i<n;i++)lowc[i]=cost[0][i];
    for(int i=1;i<n;i++)
    {
        int minc=INF;
        int p=-1;
        for(int j=0;j<n;j++)
        {
            if(!vis[j]&&minc>lowc[j])
            {
                minc=lowc[j];
                p=j;
            }
        }
        if(minc==INF)
            return -1;
        ans+=minc;
        vis[p]=true;
        for(int j=0;j<n;j++)
        {
            if(!vis[j]&&lowc[j]>cost[p][j])
            {
                lowc[j]=cost[p][j];
            }
        }
    }
    return ans;
}

int main()
{
    int T;
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d%d",&m,&n);
        gets(g[0]);
        memset(a,-1,sizeof(a));
        int tol=0;
        for(int i=0;i<n;i++)
        {
            gets(g[i]);
            for(int j=0;j<m;j++)
            {
                if(g[i][j]=='A'||g[i][j]=='S')
                {
                    a[i][j]=tol++;
                }
            }


        }
        for(int i=0;i<n;i++)
            {
                for(int j=0;j<n;j++)
                {
                    if(a[i][j]!=-1)
                    {
                        bfs(i,j);
                    }
                }
            }
        printf("%d\n",Prim(tol));
    }
}
